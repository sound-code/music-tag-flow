{
  "project_type": "javascript_electron",
  "coding_principles": {
    "avoid_duplication": true,
    "solid_principles": true,
    "code_consistency": true,
    "alignment_check": true,
    "modular_architecture": true
  },
  "javascript_rules": [
    "Usa ES6+ features (const/let, arrow functions, destructuring)",
    "Applica Single Responsibility: ogni modulo ha una responsabilità specifica",
    "Evita duplicazione: cerca funzioni simili prima di crearne di nuove",
    "Usa async/await invece di callback nesting",
    "Implementa proper error handling con try/catch",
    "Mantieni funzioni pure quando possibile",
    "Usa dependency injection per testabilità"
  ],
  "electron_specific": [
    "Separa logica main process da renderer process",
    "Usa IPC (Inter-Process Communication) per comunicazione sicura",
    "Implementa security best practices (nodeIntegration: false, contextIsolation: true)",
    "Centralizza la gestione degli eventi in un event manager",
    "Usa preload scripts per API sicure"
  ],
  "html_css_rules": [
    "Usa semantic HTML5 elements",
    "Applica BEM methodology per CSS classes",
    "Centralizza variabili CSS in :root",
    "Usa CSS Grid/Flexbox per layouts moderni",
    "Mantieni separazione di concerns (structure/presentation/behavior)",
    "Implementa responsive design mobile-first"
  ],
  "event_management": [
    "Implementa un Event Manager centralizzato per gestire tutti gli eventi",
    "Usa pattern Observer/PubSub per disaccoppiare componenti",
    "Evita listener duplicati con sistema di registrazione unico",
    "Implementa namespace per eventi (app:user:login, ui:button:click)",
    "Usa weak references per evitare memory leaks",
    "Centralizza cleanup degli event listeners",
    "Implementa event delegation per eventi DOM",
    "Usa custom events per comunicazione cross-component"
  ],
  "node_backend": [
    "Usa Express.js o Fastify per API structure",
    "Implementa middleware pattern per cross-cutting concerns",
    "Centralizza error handling con middleware dedicato",
    "Usa environment variables per configurazioni",
    "Implementa proper logging (Winston/Pino)",
    "Applica rate limiting e security headers"
  ],
  "file_structure": {
    "src/": "Codice sorgente principale",
    "src/main/": "Processo principale Electron",
    "src/renderer/": "Processi renderer (UI)",
    "src/shared/": "Codice condiviso tra processi",
    "src/api/": "Layer API/backend",
    "src/components/": "Componenti UI riutilizzabili",
    "src/utils/": "Utility functions",
    "src/services/": "Business logic services",
    "src/events/": "Event managers e custom events",
    "src/listeners/": "Event listeners organizzati per dominio",
    "assets/": "Risorse statiche",
    "config/": "File di configurazione"
  },
  "anti_patterns_to_avoid": [
    "God objects/functions che fanno troppe cose",
    "Tight coupling tra moduli",
    "Hardcoded values invece di configurazioni",
    "Callback hell - usa async/await",
    "Inline styles in HTML",
    "Event listeners non rimossi (memory leaks)",
    "Eventi duplicati per stessa azione",
    "Event bubbling non controllato",
    "Global variables pollution",
    "Mixed concerns in single file"
  ],
  "refactoring_triggers": [
    "Funzioni > 20 righe",
    "Codice duplicato > 3 volte",
    "File > 200 righe",
    "Più di 3 parametri in funzione",
    "Nested callbacks > 2 livelli",
    "Violazioni principi SOLID"
  ]
}